// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: DistSSE.proto
#ifndef GRPC_DistSSE_2eproto__INCLUDED
#define GRPC_DistSSE_2eproto__INCLUDED

#include "DistSSE.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/method_handler_impl.h>
#include <grpc++/impl/codegen/proto_utils.h>
#include <grpc++/impl/codegen/rpc_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/status.h>
#include <grpc++/impl/codegen/stub_options.h>
#include <grpc++/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class RpcService;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace DistSSE {

class RPC final {
 public:
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Setup
    virtual ::grpc::Status setup(::grpc::ClientContext* context, const ::DistSSE::SetupRequestMessage& request, ::DistSSE::ExecuteStatus* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::DistSSE::ExecuteStatus>> Asyncsetup(::grpc::ClientContext* context, const ::DistSSE::SetupRequestMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::DistSSE::ExecuteStatus>>(AsyncsetupRaw(context, request, cq));
    }
    // Search
    std::unique_ptr< ::grpc::ClientReaderInterface< ::DistSSE::SearchReply>> search(::grpc::ClientContext* context, const ::DistSSE::SearchRequestMessage& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::DistSSE::SearchReply>>(searchRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::DistSSE::SearchReply>> Asyncsearch(::grpc::ClientContext* context, const ::DistSSE::SearchRequestMessage& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::DistSSE::SearchReply>>(AsyncsearchRaw(context, request, cq, tag));
    }
    // Update
    virtual ::grpc::Status update(::grpc::ClientContext* context, const ::DistSSE::UpdateRequestMessage& request, ::DistSSE::ExecuteStatus* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::DistSSE::ExecuteStatus>> Asyncupdate(::grpc::ClientContext* context, const ::DistSSE::UpdateRequestMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::DistSSE::ExecuteStatus>>(AsyncupdateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientWriterInterface< ::DistSSE::UpdateRequestMessage>> batch_update(::grpc::ClientContext* context, ::DistSSE::ExecuteStatus* response) {
      return std::unique_ptr< ::grpc::ClientWriterInterface< ::DistSSE::UpdateRequestMessage>>(batch_updateRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::DistSSE::UpdateRequestMessage>> Asyncbatch_update(::grpc::ClientContext* context, ::DistSSE::ExecuteStatus* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::DistSSE::UpdateRequestMessage>>(Asyncbatch_updateRaw(context, response, cq, tag));
    }
    // only used for expriment simulation
    virtual ::grpc::Status cache(::grpc::ClientContext* context, const ::DistSSE::CacheRequestMessage& request, ::DistSSE::ExecuteStatus* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::DistSSE::ExecuteStatus>> Asynccache(::grpc::ClientContext* context, const ::DistSSE::CacheRequestMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::DistSSE::ExecuteStatus>>(AsynccacheRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientWriterInterface< ::DistSSE::CacheRequestMessage>> batch_cache(::grpc::ClientContext* context, ::DistSSE::ExecuteStatus* response) {
      return std::unique_ptr< ::grpc::ClientWriterInterface< ::DistSSE::CacheRequestMessage>>(batch_cacheRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::DistSSE::CacheRequestMessage>> Asyncbatch_cache(::grpc::ClientContext* context, ::DistSSE::ExecuteStatus* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::DistSSE::CacheRequestMessage>>(Asyncbatch_cacheRaw(context, response, cq, tag));
    }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::DistSSE::ExecuteStatus>* AsyncsetupRaw(::grpc::ClientContext* context, const ::DistSSE::SetupRequestMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::DistSSE::SearchReply>* searchRaw(::grpc::ClientContext* context, const ::DistSSE::SearchRequestMessage& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::DistSSE::SearchReply>* AsyncsearchRaw(::grpc::ClientContext* context, const ::DistSSE::SearchRequestMessage& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::DistSSE::ExecuteStatus>* AsyncupdateRaw(::grpc::ClientContext* context, const ::DistSSE::UpdateRequestMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientWriterInterface< ::DistSSE::UpdateRequestMessage>* batch_updateRaw(::grpc::ClientContext* context, ::DistSSE::ExecuteStatus* response) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::DistSSE::UpdateRequestMessage>* Asyncbatch_updateRaw(::grpc::ClientContext* context, ::DistSSE::ExecuteStatus* response, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::DistSSE::ExecuteStatus>* AsynccacheRaw(::grpc::ClientContext* context, const ::DistSSE::CacheRequestMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientWriterInterface< ::DistSSE::CacheRequestMessage>* batch_cacheRaw(::grpc::ClientContext* context, ::DistSSE::ExecuteStatus* response) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::DistSSE::CacheRequestMessage>* Asyncbatch_cacheRaw(::grpc::ClientContext* context, ::DistSSE::ExecuteStatus* response, ::grpc::CompletionQueue* cq, void* tag) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status setup(::grpc::ClientContext* context, const ::DistSSE::SetupRequestMessage& request, ::DistSSE::ExecuteStatus* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::DistSSE::ExecuteStatus>> Asyncsetup(::grpc::ClientContext* context, const ::DistSSE::SetupRequestMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::DistSSE::ExecuteStatus>>(AsyncsetupRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::DistSSE::SearchReply>> search(::grpc::ClientContext* context, const ::DistSSE::SearchRequestMessage& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::DistSSE::SearchReply>>(searchRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::DistSSE::SearchReply>> Asyncsearch(::grpc::ClientContext* context, const ::DistSSE::SearchRequestMessage& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::DistSSE::SearchReply>>(AsyncsearchRaw(context, request, cq, tag));
    }
    ::grpc::Status update(::grpc::ClientContext* context, const ::DistSSE::UpdateRequestMessage& request, ::DistSSE::ExecuteStatus* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::DistSSE::ExecuteStatus>> Asyncupdate(::grpc::ClientContext* context, const ::DistSSE::UpdateRequestMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::DistSSE::ExecuteStatus>>(AsyncupdateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientWriter< ::DistSSE::UpdateRequestMessage>> batch_update(::grpc::ClientContext* context, ::DistSSE::ExecuteStatus* response) {
      return std::unique_ptr< ::grpc::ClientWriter< ::DistSSE::UpdateRequestMessage>>(batch_updateRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::DistSSE::UpdateRequestMessage>> Asyncbatch_update(::grpc::ClientContext* context, ::DistSSE::ExecuteStatus* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::DistSSE::UpdateRequestMessage>>(Asyncbatch_updateRaw(context, response, cq, tag));
    }
    ::grpc::Status cache(::grpc::ClientContext* context, const ::DistSSE::CacheRequestMessage& request, ::DistSSE::ExecuteStatus* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::DistSSE::ExecuteStatus>> Asynccache(::grpc::ClientContext* context, const ::DistSSE::CacheRequestMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::DistSSE::ExecuteStatus>>(AsynccacheRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientWriter< ::DistSSE::CacheRequestMessage>> batch_cache(::grpc::ClientContext* context, ::DistSSE::ExecuteStatus* response) {
      return std::unique_ptr< ::grpc::ClientWriter< ::DistSSE::CacheRequestMessage>>(batch_cacheRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::DistSSE::CacheRequestMessage>> Asyncbatch_cache(::grpc::ClientContext* context, ::DistSSE::ExecuteStatus* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::DistSSE::CacheRequestMessage>>(Asyncbatch_cacheRaw(context, response, cq, tag));
    }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    ::grpc::ClientAsyncResponseReader< ::DistSSE::ExecuteStatus>* AsyncsetupRaw(::grpc::ClientContext* context, const ::DistSSE::SetupRequestMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::DistSSE::SearchReply>* searchRaw(::grpc::ClientContext* context, const ::DistSSE::SearchRequestMessage& request) override;
    ::grpc::ClientAsyncReader< ::DistSSE::SearchReply>* AsyncsearchRaw(::grpc::ClientContext* context, const ::DistSSE::SearchRequestMessage& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncResponseReader< ::DistSSE::ExecuteStatus>* AsyncupdateRaw(::grpc::ClientContext* context, const ::DistSSE::UpdateRequestMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientWriter< ::DistSSE::UpdateRequestMessage>* batch_updateRaw(::grpc::ClientContext* context, ::DistSSE::ExecuteStatus* response) override;
    ::grpc::ClientAsyncWriter< ::DistSSE::UpdateRequestMessage>* Asyncbatch_updateRaw(::grpc::ClientContext* context, ::DistSSE::ExecuteStatus* response, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncResponseReader< ::DistSSE::ExecuteStatus>* AsynccacheRaw(::grpc::ClientContext* context, const ::DistSSE::CacheRequestMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientWriter< ::DistSSE::CacheRequestMessage>* batch_cacheRaw(::grpc::ClientContext* context, ::DistSSE::ExecuteStatus* response) override;
    ::grpc::ClientAsyncWriter< ::DistSSE::CacheRequestMessage>* Asyncbatch_cacheRaw(::grpc::ClientContext* context, ::DistSSE::ExecuteStatus* response, ::grpc::CompletionQueue* cq, void* tag) override;
    const ::grpc::RpcMethod rpcmethod_setup_;
    const ::grpc::RpcMethod rpcmethod_search_;
    const ::grpc::RpcMethod rpcmethod_update_;
    const ::grpc::RpcMethod rpcmethod_batch_update_;
    const ::grpc::RpcMethod rpcmethod_cache_;
    const ::grpc::RpcMethod rpcmethod_batch_cache_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Setup
    virtual ::grpc::Status setup(::grpc::ServerContext* context, const ::DistSSE::SetupRequestMessage* request, ::DistSSE::ExecuteStatus* response);
    // Search
    virtual ::grpc::Status search(::grpc::ServerContext* context, const ::DistSSE::SearchRequestMessage* request, ::grpc::ServerWriter< ::DistSSE::SearchReply>* writer);
    // Update
    virtual ::grpc::Status update(::grpc::ServerContext* context, const ::DistSSE::UpdateRequestMessage* request, ::DistSSE::ExecuteStatus* response);
    virtual ::grpc::Status batch_update(::grpc::ServerContext* context, ::grpc::ServerReader< ::DistSSE::UpdateRequestMessage>* reader, ::DistSSE::ExecuteStatus* response);
    // only used for expriment simulation
    virtual ::grpc::Status cache(::grpc::ServerContext* context, const ::DistSSE::CacheRequestMessage* request, ::DistSSE::ExecuteStatus* response);
    virtual ::grpc::Status batch_cache(::grpc::ServerContext* context, ::grpc::ServerReader< ::DistSSE::CacheRequestMessage>* reader, ::DistSSE::ExecuteStatus* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_setup : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_setup() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_setup() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setup(::grpc::ServerContext* context, const ::DistSSE::SetupRequestMessage* request, ::DistSSE::ExecuteStatus* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestsetup(::grpc::ServerContext* context, ::DistSSE::SetupRequestMessage* request, ::grpc::ServerAsyncResponseWriter< ::DistSSE::ExecuteStatus>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_search : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_search() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_search() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status search(::grpc::ServerContext* context, const ::DistSSE::SearchRequestMessage* request, ::grpc::ServerWriter< ::DistSSE::SearchReply>* writer) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestsearch(::grpc::ServerContext* context, ::DistSSE::SearchRequestMessage* request, ::grpc::ServerAsyncWriter< ::DistSSE::SearchReply>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_update : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_update() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_update() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status update(::grpc::ServerContext* context, const ::DistSSE::UpdateRequestMessage* request, ::DistSSE::ExecuteStatus* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestupdate(::grpc::ServerContext* context, ::DistSSE::UpdateRequestMessage* request, ::grpc::ServerAsyncResponseWriter< ::DistSSE::ExecuteStatus>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_batch_update : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_batch_update() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_batch_update() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status batch_update(::grpc::ServerContext* context, ::grpc::ServerReader< ::DistSSE::UpdateRequestMessage>* reader, ::DistSSE::ExecuteStatus* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestbatch_update(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::DistSSE::ExecuteStatus, ::DistSSE::UpdateRequestMessage>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(3, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_cache : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_cache() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_cache() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status cache(::grpc::ServerContext* context, const ::DistSSE::CacheRequestMessage* request, ::DistSSE::ExecuteStatus* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestcache(::grpc::ServerContext* context, ::DistSSE::CacheRequestMessage* request, ::grpc::ServerAsyncResponseWriter< ::DistSSE::ExecuteStatus>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_batch_cache : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_batch_cache() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_batch_cache() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status batch_cache(::grpc::ServerContext* context, ::grpc::ServerReader< ::DistSSE::CacheRequestMessage>* reader, ::DistSSE::ExecuteStatus* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestbatch_cache(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::DistSSE::ExecuteStatus, ::DistSSE::CacheRequestMessage>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(5, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_setup<WithAsyncMethod_search<WithAsyncMethod_update<WithAsyncMethod_batch_update<WithAsyncMethod_cache<WithAsyncMethod_batch_cache<Service > > > > > > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_setup : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_setup() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_setup() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status setup(::grpc::ServerContext* context, const ::DistSSE::SetupRequestMessage* request, ::DistSSE::ExecuteStatus* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_search : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_search() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_search() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status search(::grpc::ServerContext* context, const ::DistSSE::SearchRequestMessage* request, ::grpc::ServerWriter< ::DistSSE::SearchReply>* writer) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_update : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_update() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_update() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status update(::grpc::ServerContext* context, const ::DistSSE::UpdateRequestMessage* request, ::DistSSE::ExecuteStatus* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_batch_update : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_batch_update() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_batch_update() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status batch_update(::grpc::ServerContext* context, ::grpc::ServerReader< ::DistSSE::UpdateRequestMessage>* reader, ::DistSSE::ExecuteStatus* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_cache : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_cache() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_cache() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status cache(::grpc::ServerContext* context, const ::DistSSE::CacheRequestMessage* request, ::DistSSE::ExecuteStatus* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_batch_cache : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_batch_cache() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_batch_cache() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status batch_cache(::grpc::ServerContext* context, ::grpc::ServerReader< ::DistSSE::CacheRequestMessage>* reader, ::DistSSE::ExecuteStatus* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_setup : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_setup() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::StreamedUnaryHandler< ::DistSSE::SetupRequestMessage, ::DistSSE::ExecuteStatus>(std::bind(&WithStreamedUnaryMethod_setup<BaseClass>::Streamedsetup, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_setup() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status setup(::grpc::ServerContext* context, const ::DistSSE::SetupRequestMessage* request, ::DistSSE::ExecuteStatus* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedsetup(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::DistSSE::SetupRequestMessage,::DistSSE::ExecuteStatus>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_update : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_update() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::StreamedUnaryHandler< ::DistSSE::UpdateRequestMessage, ::DistSSE::ExecuteStatus>(std::bind(&WithStreamedUnaryMethod_update<BaseClass>::Streamedupdate, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_update() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status update(::grpc::ServerContext* context, const ::DistSSE::UpdateRequestMessage* request, ::DistSSE::ExecuteStatus* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedupdate(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::DistSSE::UpdateRequestMessage,::DistSSE::ExecuteStatus>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_cache : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_cache() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::StreamedUnaryHandler< ::DistSSE::CacheRequestMessage, ::DistSSE::ExecuteStatus>(std::bind(&WithStreamedUnaryMethod_cache<BaseClass>::Streamedcache, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_cache() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status cache(::grpc::ServerContext* context, const ::DistSSE::CacheRequestMessage* request, ::DistSSE::ExecuteStatus* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedcache(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::DistSSE::CacheRequestMessage,::DistSSE::ExecuteStatus>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_setup<WithStreamedUnaryMethod_update<WithStreamedUnaryMethod_cache<Service > > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_search : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithSplitStreamingMethod_search() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::SplitServerStreamingHandler< ::DistSSE::SearchRequestMessage, ::DistSSE::SearchReply>(std::bind(&WithSplitStreamingMethod_search<BaseClass>::Streamedsearch, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithSplitStreamingMethod_search() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status search(::grpc::ServerContext* context, const ::DistSSE::SearchRequestMessage* request, ::grpc::ServerWriter< ::DistSSE::SearchReply>* writer) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status Streamedsearch(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::DistSSE::SearchRequestMessage,::DistSSE::SearchReply>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_search<Service > SplitStreamedService;
  typedef WithStreamedUnaryMethod_setup<WithSplitStreamingMethod_search<WithStreamedUnaryMethod_update<WithStreamedUnaryMethod_cache<Service > > > > StreamedService;
};

}  // namespace DistSSE


#endif  // GRPC_DistSSE_2eproto__INCLUDED
